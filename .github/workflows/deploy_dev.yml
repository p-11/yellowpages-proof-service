name: Deploy Dev

on:
  push:
    paths:
      - .github/workflows/deploy_dev.yml
      - src/**
      - Dockerfile
      - enclave.toml
      - Cargo.*

env:
  VERSION: "hardcode-this-for-now"
  RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  EV_API_KEY: ${{ secrets.DEV_EV_API_KEY_WITH_ENCLAVE_DEPLOY_PERMISSION }}
  EV_APP_UUID: ${{ secrets.DEV_EV_APP_UUID }}
  EV_ENCLAVE_SIGNING_CERT: ${{ secrets.DEV_EV_ENCLAVE_SIGNING_CERT }}
  EV_ENCLAVE_SIGNING_KEY: ${{ secrets.DEV_EV_ENCLAVE_SIGNING_KEY }}
  YP_DS_API_URL: ${{ secrets.DEV_YP_DS_API_URL }}
  YP_DS_API_KEY: ${{ secrets.DEV_YP_DS_API_KEY }}

jobs:
  deploy:
    name: Deploy Dev
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      # - name: Ensure Clippy is available
      #   run: rustup component add clippy

      # - name: Ensure rustfmt is available
      #   run: rustup component add rustfmt

      # - name: Run Clippy
      #   run: cargo clippy --all-targets --all-features -- -W clippy::pedantic -D warnings

      # - name: Check Rust formatting
      #   run: cargo fmt -- --check

      # - name: Run Rust tests
      #   run: cargo test

      - name: Deploy Enclave
        env:
          EV_API_KEY: ${{ env.EV_API_KEY }}
          EV_APP_UUID: ${{ env.EV_APP_UUID }}
          EV_ENCLAVE_SIGNING_CERT: ${{ env.EV_ENCLAVE_SIGNING_CERT }}
          EV_ENCLAVE_SIGNING_KEY: ${{ env.EV_ENCLAVE_SIGNING_KEY }}
        run: |
          # fail fast if any part of the pipe errors
          set -o pipefail
          # install the CLI
          curl https://cli.evervault.com/v4/install -sL | sh
          # write cert + key
          echo "$EV_ENCLAVE_SIGNING_CERT" > cert.pem
          echo "$EV_ENCLAVE_SIGNING_KEY"  > key.pem
          # deploy and emit a compact pcr.json
          ev enclave deploy -v \
            | tee raw.json \
            | jq -c \
                --arg version ${{ env.VERSION }} \
                --arg run_url ${{ env.RUN_URL }} \
                '{
                  version:            $version,
                  github_action_run:  $run_url,
                  pcr_0:              .measurements.PCR0,
                  pcr_1:              .measurements.PCR1,
                  pcr_2:              .measurements.PCR2,
                  pcr_8:              .measurements.PCR8
                }' > pcrs.json

      - name: Upload PCRs & version to the YP Data Service
        env:
          YP_DS_API_URL: ${{ env.YP_DS_API_URL }}
          YP_DS_API_KEY: ${{ env.YP_DS_API_KEY }}
        run: |
          # fail fast if any part of the pipe errors
          set -eo pipefail
          echo "Sending PCR JSON to data serviceâ€¦"
          # fail on 4xx/5xx, show errors
          curl -v --show-error \
            -X POST "${{ env.YP_DS_API_URL }}" \
            -H "x-api-key: ${{ env.YP_DS_API_KEY }}" \
            -H "Content-Type: application/json" \
            --data @pcrs.json
          echo "Uploaded to the YP Data Service"

      - name: Output PCRs & version in GitHub Step Summary
        run: |
          echo "### Enclave Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # blank line
          echo "**Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: $(cat pcrs.json | jq -r '.version')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # blank line
          echo "**PCRs**:" >> $GITHUB_STEP_SUMMARY
          echo "- PCR0: $(cat pcrs.json | jq -r '.pcr_0')" >> $GITHUB_STEP_SUMMARY
          echo "- PCR1: $(cat pcrs.json | jq -r '.pcr_1')" >> $GITHUB_STEP_SUMMARY
          echo "- PCR2: $(cat pcrs.json | jq -r '.pcr_2')" >> $GITHUB_STEP_SUMMARY
          echo "- PCR8: $(cat pcrs.json | jq -r '.pcr_8')" >> $GITHUB_STEP_SUMMARY
